// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "github.com/extmatperez/meli_bootcamp_go_w2-2/internal/application/dtos/purchase_order"
	entities "github.com/extmatperez/meli_bootcamp_go_w2-2/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockPurchaseOrderService is an autogenerated mock type for the PurchaseOrderService type
type MockPurchaseOrderService struct {
	mock.Mock
}

// CountByBuyerID provides a mock function with given fields: ctx, buyerID
func (_m *MockPurchaseOrderService) CountByBuyerID(ctx *context.Context, buyerID int) (int, error) {
	ret := _m.Called(ctx, buyerID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) (int, error)); ok {
		return rf(ctx, buyerID)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) int); ok {
		r0 = rf(ctx, buyerID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) error); ok {
		r1 = rf(ctx, buyerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, purchaseOrder
func (_m *MockPurchaseOrderService) Create(ctx *context.Context, purchaseOrder entities.PurchaseOrder) (entities.PurchaseOrder, error) {
	ret := _m.Called(ctx, purchaseOrder)

	var r0 entities.PurchaseOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, entities.PurchaseOrder) (entities.PurchaseOrder, error)); ok {
		return rf(ctx, purchaseOrder)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, entities.PurchaseOrder) entities.PurchaseOrder); ok {
		r0 = rf(ctx, purchaseOrder)
	} else {
		r0 = ret.Get(0).(entities.PurchaseOrder)
	}

	if rf, ok := ret.Get(1).(func(*context.Context, entities.PurchaseOrder) error); ok {
		r1 = rf(ctx, purchaseOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockPurchaseOrderService) Delete(ctx *context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockPurchaseOrderService) Get(ctx *context.Context, id int) (entities.PurchaseOrder, error) {
	ret := _m.Called(ctx, id)

	var r0 entities.PurchaseOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) (entities.PurchaseOrder, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) entities.PurchaseOrder); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entities.PurchaseOrder)
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *MockPurchaseOrderService) GetAll(ctx *context.Context) ([]entities.PurchaseOrder, error) {
	ret := _m.Called(ctx)

	var r0 []entities.PurchaseOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context) ([]entities.PurchaseOrder, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*context.Context) []entities.PurchaseOrder); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.PurchaseOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, updatePurchaseOrderRequest
func (_m *MockPurchaseOrderService) Update(ctx *context.Context, id int, updatePurchaseOrderRequest dtos.UpdatePurchaseOrderRequestDTO) (entities.PurchaseOrder, error) {
	ret := _m.Called(ctx, id, updatePurchaseOrderRequest)

	var r0 entities.PurchaseOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int, dtos.UpdatePurchaseOrderRequestDTO) (entities.PurchaseOrder, error)); ok {
		return rf(ctx, id, updatePurchaseOrderRequest)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int, dtos.UpdatePurchaseOrderRequestDTO) entities.PurchaseOrder); ok {
		r0 = rf(ctx, id, updatePurchaseOrderRequest)
	} else {
		r0 = ret.Get(0).(entities.PurchaseOrder)
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int, dtos.UpdatePurchaseOrderRequestDTO) error); ok {
		r1 = rf(ctx, id, updatePurchaseOrderRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockPurchaseOrderService creates a new instance of MockPurchaseOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPurchaseOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPurchaseOrderService {
	mock := &MockPurchaseOrderService{}
	mock.Mock.Test(t)

	return mock
}
