definitions:
  dtos.CreateBuyerRequestDTO:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    required:
      - card_number_id
      - first_name
      - last_name
    type: object
  dtos.CreateSectionRequestDTO:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: integer
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: integer
      product_type_id:
        type: integer
      section_number:
        type: integer
      warehouse_id:
        type: integer
    type: object
  dtos.CreateSellerRequestDTO:
    properties:
      address:
        type: string
      cid:
        type: integer
      company_name:
        type: string
      locality_id:
        type: string
      telephone:
        type: string
    required:
      - address
      - cid
      - company_name
      - locality_id
      - telephone
    type: object
  dtos.GetNumberOfSellersResponseDTO:
    properties:
      locality_id:
        type: integer
      locality_name:
        type: string
      sellers_count:
        type: integer
    type: object
  dtos.UpdateBuyerRequestDTO:
    properties:
      card_number_id:
        type: string
        x-order: "0"
      first_name:
        type: string
        x-order: "1"
      last_name:
        type: string
        x-order: "2"
    type: object
  dtos.UpdateLocalityRequestDTO:
    properties:
      country_name:
        type: string
      locality_name:
        type: string
      province_name:
        type: string
    type: object
  dtos.UpdateSectionRequestDTO:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: integer
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: integer
      product_type_id:
        type: integer
      section_number:
        type: integer
      warehouse_id:
        type: integer
    type: object
  dtos.UpdateSellerRequestDTO:
    properties:
      address:
        type: string
      cid:
        type: integer
      company_name:
        type: string
      locality_id:
        type: string
      telephone:
        type: string
    type: object
  dtos.WarehouseRequestDTO:
    properties:
      address:
        type: string
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: integer
      telephone:
        type: string
      warehouse_code:
        type: string
    type: object
  entities.Buyer:
    properties:
      card_number_id:
        type: string
        x-order: "1"
      first_name:
        type: string
        x-order: "2"
      id:
        type: integer
        x-order: "0"
      last_name:
        type: string
        x-order: "3"
    type: object
  entities.Locality:
    properties:
      country_name:
        type: string
      id:
        type: integer
      locality_name:
        type: string
      province_name:
        type: string
    required:
      - country_name
      - id
      - locality_name
      - province_name
    type: object
  entities.RequestCreateEmployee:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      warehouse_id:
        type: integer
    type: object
  entities.RequestUpdateEmployee:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      warehouse_id:
        type: integer
    type: object
  handlers.RequestCreateProduct:
    properties:
      description:
        type: string
      expiration_rate:
        type: integer
      freezing_rate:
        type: integer
      height:
        type: number
      length:
        type: number
      netweight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temperature:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    type: object
  handlers.RequestUpdateProduct:
    properties:
      description:
        type: string
      expiration_rate:
        type: integer
      freezing_rate:
        type: integer
      height:
        type: number
      length:
        type: number
      netweight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temperature:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    type: object
  web_utils.errorResponse:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  web_utils.response:
    properties:
      data: { }
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
    url: https://developers.mercadolibre.com.ar/support
  description: This API Handle MELI - Sprint 1 - Grupo 2
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://developers.mercadolibre.com.ar/es_ar/terminos-y-condiciones
  title: MELI Bootcamp API - Sprint 1 - Grupo 2
  version: "1.0"
paths:
  /api/v1/buyers:
    get:
      consumes:
        - application/json
      description: Get the details of all buyers on the database.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/web_utils.response'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/entities.Buyer'
                    type: array
                type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
      summary: List Buyers
      tags:
        - Buyers
    post:
      consumes:
        - application/json
      description: Save a buyer on the database.
      parameters:
        - description: Buyer to Create
          in: body
          name: SellerHandler
          required: true
          schema:
            $ref: '#/definitions/dtos.CreateBuyerRequestDTO'
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Buyer'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
      summary: Create Buyer
      tags:
        - Buyers
  /api/v1/buyers/{id}:
    delete:
      consumes:
        - application/json
      description: Delete Buyers
      parameters:
        - description: ID of a Buyer to be excluded
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
      summary: Delete Buyer
      tags:
        - Buyers
    get:
      description: Get the details of a Buyer
      parameters:
        - description: ID of Buyer to be searched
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Buyer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
      summary: Get Buyer
      tags:
        - Buyers
    patch:
      consumes:
        - application/json
      description: Update the details of a Buyer
      parameters:
        - description: ID of Buyer to be updated
          in: path
          name: id
          required: true
          type: string
        - description: Updated Buyer details
          in: body
          name: Buyer
          required: true
          schema:
            $ref: '#/definitions/dtos.UpdateBuyerRequestDTO'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Buyer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
      summary: Update Buyer
      tags:
        - Buyers
  /api/v1/employees:
    get:
      consumes:
        - application/json
      description: getAll employees
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: List Employees
      tags:
        - Employees
    post:
      consumes:
        - application/json
      description: Create employees
      parameters:
        - description: EmployeeHandler to Create
          in: body
          name: Employees
          required: true
          schema:
            $ref: '#/definitions/entities.RequestCreateEmployee'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Create Employees
      tags:
        - Employees
  /api/v1/employees/{id}:
    delete:
      consumes:
        - application/json
      description: Delete Employees
      parameters:
        - description: ID of a Employees to be excluded
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Delete Employees
      tags:
        - Employees
    get:
      consumes:
        - application/json
      description: Get the details of a Employees
      parameters:
        - description: ID of Employees to be searched
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Get Employees
      tags:
        - Employees
    patch:
      consumes:
        - application/json
      description: Update the details of a Employees
      parameters:
        - description: ID of Employees to be updated
          in: path
          name: id
          required: true
          type: string
        - description: Updated Employeesers details
          in: body
          name: Employees
          required: true
          schema:
            $ref: '#/definitions/entities.RequestUpdateEmployee'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Update Employees
      tags:
        - Employees
  /api/v1/localities:
    get:
      consumes:
        - application/json
      description: Get the details of all localities on the database.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/web_utils.response'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/entities.Locality'
                    type: array
                type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
      summary: List Localities
      tags:
        - Localities
    post:
      consumes:
        - application/json
      description: search for a locality and return the number of sellers.
      parameters:
        - description: ID of Locality to be searched
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/web_utils.response'
              - properties:
                  data:
                    $ref: '#/definitions/dtos.GetNumberOfSellersResponseDTO'
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
      summary: CountSellers
      tags:
        - Localities
  /api/v1/localities/{id}:
    delete:
      consumes:
        - application/json
      description: Delete Localities
      parameters:
        - description: ID of a Locality to be excluded
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
      summary: Delete Locality
      tags:
        - Localities
    get:
      description: Get the details of a Locality
      parameters:
        - description: ID of Locality to be searched
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Locality'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
      summary: Get Locality
      tags:
        - Localities
    patch:
      consumes:
        - application/json
      description: Update the details of a Locality
      parameters:
        - description: ID of Locality to be updated
          in: path
          name: id
          required: true
          type: string
        - description: Updated Locality details
          in: body
          name: Locality
          required: true
          schema:
            $ref: '#/definitions/dtos.UpdateLocalityRequestDTO'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Locality'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web_utils.errorResponse'
      summary: Update Locality
      tags:
        - Localities
  /api/v1/products:
    get:
      consumes:
        - application/json
      description: getAll products
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: List products
      tags:
        - Products
    post:
      consumes:
        - application/json
      description: Create ProductHandler
      parameters:
        - description: ProductHandler to Create
          in: body
          name: ProductHandler
          required: true
          schema:
            $ref: '#/definitions/handlers.RequestCreateProduct'
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Create ProductHandler
      tags:
        - Products
  /api/v1/products/{id}:
    delete:
      consumes:
        - application/json
      description: Delete ProductHandler
      parameters:
        - description: ID of a ProductHandler to be excluded
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Delete ProductHandler
      tags:
        - Products
    get:
      consumes:
        - application/json
      description: Get the details of a Products
      parameters:
        - description: ID of ProductHandler to be searched
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Get ProductHandler
      tags:
        - Products
    patch:
      consumes:
        - application/json
      description: Update the details of a ProductHandler
      parameters:
        - description: ID of Products to be updated
          in: path
          name: id
          required: true
          type: string
        - description: Updated ProductHandler details
          in: body
          name: Products
          required: true
          schema:
            $ref: '#/definitions/handlers.RequestUpdateProduct'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Update ProductHandler
      tags:
        - Products
  /api/v1/sections:
    get:
      consumes:
        - application/json
      description: getAll sections
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: List sections
      tags:
        - Sections
    post:
      consumes:
        - application/json
      description: Create section
      parameters:
        - description: SectionHandler to Create
          in: body
          name: SectionHandler
          required: true
          schema:
            $ref: '#/definitions/dtos.CreateSectionRequestDTO'
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Create SectionHandler
      tags:
        - Sections
  /api/v1/sections/{id}:
    delete:
      consumes:
        - application/json
      description: Delete SectionHandler
      parameters:
        - description: ID of a SectionHandler to be excluded
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Delete SectionHandler
      tags:
        - Sections
    get:
      consumes:
        - application/json
      description: Get the details of a SectionHandler
      parameters:
        - description: ID of SectionHandler to be searched
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Get SectionHandler
      tags:
        - Sections
    patch:
      consumes:
        - application/json
      description: Update the details of a SectionHandler
      parameters:
        - description: ID of SectionHandler to be updated
          in: path
          name: id
          required: true
          type: string
        - description: Updated SectionHandler details
          in: body
          name: Sections
          required: true
          schema:
            $ref: '#/definitions/dtos.UpdateSectionRequestDTO'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Update SectionHandler
      tags:
        - Sections
  /api/v1/sellers:
    get:
      consumes:
        - application/json
      description: getAll sellers
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: List sellers
      tags:
        - Sellers
    post:
      consumes:
        - application/json
      description: Create sellers
      parameters:
        - description: SellerHandler to Create
          in: body
          name: SellerHandler
          required: true
          schema:
            $ref: '#/definitions/dtos.CreateSellerRequestDTO'
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Create Sellers
      tags:
        - Sellers
  /api/v1/sellers/{id}:
    delete:
      consumes:
        - application/json
      description: Delete Sellers
      parameters:
        - description: ID of a Sellers to be excluded
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Delete Sellers
      tags:
        - Sellers
    get:
      consumes:
        - application/json
      description: Get the details of a Sellers
      parameters:
        - description: ID of Sellers to be searched
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Get Sellers
      tags:
        - Sellers
    patch:
      consumes:
        - application/json
      description: Update the details of a Sellers
      parameters:
        - description: ID of Sellers to be updated
          in: path
          name: id
          required: true
          type: string
        - description: Updated Sellers details
          in: body
          name: Sellers
          required: true
          schema:
            $ref: '#/definitions/dtos.UpdateSellerRequestDTO'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Update Sellers
      tags:
        - Sellers
  /api/v1/warehouses:
    get:
      description: get warehouses
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/web_utils.response'
            type: array
      summary: List warehouses
      tags:
        - Warehouses
    post:
      consumes:
        - application/json
      description: Create warehouses
      parameters:
        - description: warehouses to create
          in: body
          name: WarehouseHandler
          required: true
          schema:
            $ref: '#/definitions/dtos.WarehouseRequestDTO'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Create warehouses
      tags:
        - Warehouses
  /api/v1/warehouses/{id}:
    delete:
      description: delete warehouses by id
      parameters:
        - description: WarehouseHandler ID
          in: path
          name: id
          required: true
          type: integer
      responses:
        "204":
          description: No Content
      summary: Delete warehouses
      tags:
        - Warehouses
    get:
      description: get one warehouses by id
      parameters:
        - description: WarehouseHandler ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Get warehouses
      tags:
        - Warehouses
    patch:
      consumes:
        - application/json
      description: update warehouses
      parameters:
        - description: WarehouseHandler ID
          in: path
          name: id
          required: true
          type: integer
        - description: WarehouseHandler to update
          in: body
          name: WarehouseHandler
          required: true
          schema:
            $ref: '#/definitions/dtos.WarehouseRequestDTO'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web_utils.response'
      summary: Update warehouses
      tags:
        - Warehouses
swagger: "2.0"
