// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/extmatperez/meli_bootcamp_go_w2-2/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// ProductServiceMock is an autogenerated mock type for the ProductService type
type ProductServiceMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ProductServiceMock) Delete(ctx *context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *ProductServiceMock) Get(ctx *context.Context, id int) (*entities.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) (*entities.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) *entities.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *ProductServiceMock) GetAll(ctx *context.Context) (*[]entities.Product, error) {
	ret := _m.Called(ctx)

	var r0 *[]entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context) (*[]entities.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*context.Context) *[]entities.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, description, expiration_rate, freezing_rate, height, length, netweight, product_code, recommended_freezing_temperature, width, product_type_id, seller_id
func (_m *ProductServiceMock) Save(ctx *context.Context, description string, expiration_rate int, freezing_rate int, height float32, length float32, netweight float32, product_code string, recommended_freezing_temperature float32, width float32, product_type_id int, seller_id int) (*entities.Product, error) {
	ret := _m.Called(ctx, description, expiration_rate, freezing_rate, height, length, netweight, product_code, recommended_freezing_temperature, width, product_type_id, seller_id)

	var r0 *entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, string, int, int, float32, float32, float32, string, float32, float32, int, int) (*entities.Product, error)); ok {
		return rf(ctx, description, expiration_rate, freezing_rate, height, length, netweight, product_code, recommended_freezing_temperature, width, product_type_id, seller_id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, string, int, int, float32, float32, float32, string, float32, float32, int, int) *entities.Product); ok {
		r0 = rf(ctx, description, expiration_rate, freezing_rate, height, length, netweight, product_code, recommended_freezing_temperature, width, product_type_id, seller_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, string, int, int, float32, float32, float32, string, float32, float32, int, int) error); ok {
		r1 = rf(ctx, description, expiration_rate, freezing_rate, height, length, netweight, product_code, recommended_freezing_temperature, width, product_type_id, seller_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, description, expiration_rate, freezing_rate, height, length, netweight, product_code, recommended_freezing_temperature, width, product_type_id, seller_id, id
func (_m *ProductServiceMock) Update(ctx *context.Context, description *string, expiration_rate *int, freezing_rate *int, height *float32, length *float32, netweight *float32, product_code *string, recommended_freezing_temperature *float32, width *float32, product_type_id *int, seller_id *int, id int) (*entities.Product, error) {
	ret := _m.Called(ctx, description, expiration_rate, freezing_rate, height, length, netweight, product_code, recommended_freezing_temperature, width, product_type_id, seller_id, id)

	var r0 *entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, *string, *int, *int, *float32, *float32, *float32, *string, *float32, *float32, *int, *int, int) (*entities.Product, error)); ok {
		return rf(ctx, description, expiration_rate, freezing_rate, height, length, netweight, product_code, recommended_freezing_temperature, width, product_type_id, seller_id, id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, *string, *int, *int, *float32, *float32, *float32, *string, *float32, *float32, *int, *int, int) *entities.Product); ok {
		r0 = rf(ctx, description, expiration_rate, freezing_rate, height, length, netweight, product_code, recommended_freezing_temperature, width, product_type_id, seller_id, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, *string, *int, *int, *float32, *float32, *float32, *string, *float32, *float32, *int, *int, int) error); ok {
		r1 = rf(ctx, description, expiration_rate, freezing_rate, height, length, netweight, product_code, recommended_freezing_temperature, width, product_type_id, seller_id, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductServiceMock creates a new instance of ProductServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServiceMock {
	mock := &ProductServiceMock{}
	mock.Mock.Test(t)

	return mock
}
