// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/extmatperez/meli_bootcamp_go_w2-2/internal/domain"

	dtos "github.com/extmatperez/meli_bootcamp_go_w2-2/internal/application/dtos"

	mock "github.com/stretchr/testify/mock"
)

// MockLocalityService is an autogenerated mock type for the LocalityService type
type MockLocalityService struct {
	mock.Mock
}

// CountSellers provides a mock function with given fields: ctx, id
func (_m *MockLocalityService) CountSellers(ctx *context.Context, id int) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) (int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockLocalityService) Create(ctx *context.Context, _a1 domain.Locality) (domain.Locality, error) {
	ret := _m.Called(ctx, _a1)

	var r0 domain.Locality
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, domain.Locality) (domain.Locality, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, domain.Locality) domain.Locality); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(domain.Locality)
	}

	if rf, ok := ret.Get(1).(func(*context.Context, domain.Locality) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockLocalityService) Delete(ctx *context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockLocalityService) Get(ctx *context.Context, id int) (domain.Locality, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Locality
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) (domain.Locality, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) domain.Locality); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Locality)
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *MockLocalityService) GetAll(ctx *context.Context) ([]domain.Locality, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Locality
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context) ([]domain.Locality, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*context.Context) []domain.Locality); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Locality)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, updateLocalityRequest
func (_m *MockLocalityService) Update(ctx *context.Context, id int, updateLocalityRequest dtos.UpdateLocalityRequestDTO) (domain.Locality, error) {
	ret := _m.Called(ctx, id, updateLocalityRequest)

	var r0 domain.Locality
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int, dtos.UpdateLocalityRequestDTO) (domain.Locality, error)); ok {
		return rf(ctx, id, updateLocalityRequest)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int, dtos.UpdateLocalityRequestDTO) domain.Locality); ok {
		r0 = rf(ctx, id, updateLocalityRequest)
	} else {
		r0 = ret.Get(0).(domain.Locality)
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int, dtos.UpdateLocalityRequestDTO) error); ok {
		r1 = rf(ctx, id, updateLocalityRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockLocalityService creates a new instance of MockLocalityService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocalityService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocalityService {
	mock := &MockLocalityService{}
	mock.Mock.Test(t)

	return mock
}
