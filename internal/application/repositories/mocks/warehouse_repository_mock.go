// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/extmatperez/meli_bootcamp_go_w2-2/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// WarehouseRepositoryMock is an autogenerated mock type for the WarehouseRepository type
type WarehouseRepositoryMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *WarehouseRepositoryMock) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, warehouseCode
func (_m *WarehouseRepositoryMock) Exists(ctx context.Context, warehouseCode string) bool {
	ret := _m.Called(ctx, warehouseCode)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, warehouseCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *WarehouseRepositoryMock) Get(ctx context.Context, id int) (entities.Warehouse, error) {
	ret := _m.Called(ctx, id)

	var r0 entities.Warehouse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entities.Warehouse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entities.Warehouse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entities.Warehouse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *WarehouseRepositoryMock) GetAll(ctx context.Context) ([]entities.Warehouse, error) {
	ret := _m.Called(ctx)

	var r0 []entities.Warehouse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Warehouse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Warehouse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Warehouse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, w
func (_m *WarehouseRepositoryMock) Save(ctx context.Context, w entities.Warehouse) (int, error) {
	ret := _m.Called(ctx, w)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Warehouse) (int, error)); ok {
		return rf(ctx, w)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Warehouse) int); ok {
		r0 = rf(ctx, w)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Warehouse) error); ok {
		r1 = rf(ctx, w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, w
func (_m *WarehouseRepositoryMock) Update(ctx context.Context, w entities.Warehouse) error {
	ret := _m.Called(ctx, w)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Warehouse) error); ok {
		r0 = rf(ctx, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWarehouseRepositoryMock creates a new instance of WarehouseRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWarehouseRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WarehouseRepositoryMock {
	mock := &WarehouseRepositoryMock{}
	mock.Mock.Test(t)

	return mock
}
