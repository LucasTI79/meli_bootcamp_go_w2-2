// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/extmatperez/meli_bootcamp_go_w2-2/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeServiceMock is an autogenerated mock type for the EmployeeService type
type EmployeeServiceMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *EmployeeServiceMock) Delete(ctx *context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *EmployeeServiceMock) Get(ctx *context.Context, id int) (*entities.Employee, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) (*entities.Employee, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) *entities.Employee); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *EmployeeServiceMock) GetAll(ctx *context.Context) (*[]entities.Employee, error) {
	ret := _m.Called(ctx)

	var r0 *[]entities.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context) (*[]entities.Employee, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*context.Context) *[]entities.Employee); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, employee
func (_m *EmployeeServiceMock) Save(ctx *context.Context, employee entities.Employee) (*entities.Employee, error) {
	ret := _m.Called(ctx, employee)

	var r0 *entities.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, entities.Employee) (*entities.Employee, error)); ok {
		return rf(ctx, employee)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, entities.Employee) *entities.Employee); ok {
		r0 = rf(ctx, employee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, entities.Employee) error); ok {
		r1 = rf(ctx, employee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, reqUpdateEmployee
func (_m *EmployeeServiceMock) Update(ctx *context.Context, id int, reqUpdateEmployee *entities.RequestUpdateEmployee) (*entities.Employee, error) {
	ret := _m.Called(ctx, id, reqUpdateEmployee)

	var r0 *entities.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int, *entities.RequestUpdateEmployee) (*entities.Employee, error)); ok {
		return rf(ctx, id, reqUpdateEmployee)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int, *entities.RequestUpdateEmployee) *entities.Employee); ok {
		r0 = rf(ctx, id, reqUpdateEmployee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int, *entities.RequestUpdateEmployee) error); ok {
		r1 = rf(ctx, id, reqUpdateEmployee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEmployeeServiceMock creates a new instance of EmployeeServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeServiceMock {
	mock := &EmployeeServiceMock{}
	mock.Mock.Test(t)

	return mock
}
