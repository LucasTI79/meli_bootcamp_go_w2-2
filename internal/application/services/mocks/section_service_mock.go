// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/extmatperez/meli_bootcamp_go_w2-2/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// SectionServiceMock is an autogenerated mock type for the SectionService type
type SectionServiceMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *SectionServiceMock) Delete(ctx *context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *SectionServiceMock) Get(ctx *context.Context, id int) (*entities.Section, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) (*entities.Section, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) *entities.Section); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *SectionServiceMock) GetAll(ctx *context.Context) (*[]entities.Section, error) {
	ret := _m.Called(ctx)

	var r0 *[]entities.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context) (*[]entities.Section, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*context.Context) *[]entities.Section); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseID, productTypeID
func (_m *SectionServiceMock) Save(ctx *context.Context, sectionNumber int, currentTemperature int, minimumTemperature int, currentCapacity int, minimumCapacity int, maximumCapacity int, warehouseID int, productTypeID int) (*entities.Section, error) {
	ret := _m.Called(ctx, sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseID, productTypeID)

	var r0 *entities.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int, int, int, int, int, int, int, int) (*entities.Section, error)); ok {
		return rf(ctx, sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseID, productTypeID)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int, int, int, int, int, int, int, int) *entities.Section); ok {
		r0 = rf(ctx, sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseID, productTypeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int, int, int, int, int, int, int, int) error); ok {
		r1 = rf(ctx, sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseID, productTypeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseID, productTypeID, id
func (_m *SectionServiceMock) Update(ctx context.Context, sectionNumber *int, currentTemperature *int, minimumTemperature *int, currentCapacity *int, minimumCapacity *int, maximumCapacity *int, warehouseID *int, productTypeID *int, id int) (*entities.Section, error) {
	ret := _m.Called(ctx, sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseID, productTypeID, id)

	var r0 *entities.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *int, *int, *int, *int, *int, *int, *int, *int, int) (*entities.Section, error)); ok {
		return rf(ctx, sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseID, productTypeID, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *int, *int, *int, *int, *int, *int, *int, *int, int) *entities.Section); ok {
		r0 = rf(ctx, sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseID, productTypeID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *int, *int, *int, *int, *int, *int, *int, *int, int) error); ok {
		r1 = rf(ctx, sectionNumber, currentTemperature, minimumTemperature, currentCapacity, minimumCapacity, maximumCapacity, warehouseID, productTypeID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSectionServiceMock creates a new instance of SectionServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSectionServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SectionServiceMock {
	mock := &SectionServiceMock{}
	mock.Mock.Test(t)

	return mock
}
