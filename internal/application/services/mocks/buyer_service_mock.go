// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "github.com/extmatperez/meli_bootcamp_go_w2-2/internal/application/dtos"
	entities "github.com/extmatperez/meli_bootcamp_go_w2-2/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// BuyerServiceMock is an autogenerated mock type for the BuyerService type
type BuyerServiceMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, createBuyerRequest
func (_m *BuyerServiceMock) Create(ctx *context.Context, createBuyerRequest *dtos.CreateBuyerRequestDTO) (*entities.Buyer, error) {
	ret := _m.Called(ctx, createBuyerRequest)

	var r0 *entities.Buyer
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, *dtos.CreateBuyerRequestDTO) (*entities.Buyer, error)); ok {
		return rf(ctx, createBuyerRequest)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, *dtos.CreateBuyerRequestDTO) *entities.Buyer); ok {
		r0 = rf(ctx, createBuyerRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Buyer)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, *dtos.CreateBuyerRequestDTO) error); ok {
		r1 = rf(ctx, createBuyerRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *BuyerServiceMock) Delete(ctx *context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *BuyerServiceMock) Get(ctx *context.Context, id int) (*entities.Buyer, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Buyer
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) (*entities.Buyer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) *entities.Buyer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Buyer)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *BuyerServiceMock) GetAll(ctx *context.Context) (*[]entities.Buyer, error) {
	ret := _m.Called(ctx)

	var r0 *[]entities.Buyer
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context) (*[]entities.Buyer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*context.Context) *[]entities.Buyer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Buyer)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, updateBuyerRequest
func (_m *BuyerServiceMock) Update(ctx *context.Context, id int, updateBuyerRequest *dtos.UpdateBuyerRequestDTO) (*entities.Buyer, error) {
	ret := _m.Called(ctx, id, updateBuyerRequest)

	var r0 *entities.Buyer
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int, *dtos.UpdateBuyerRequestDTO) (*entities.Buyer, error)); ok {
		return rf(ctx, id, updateBuyerRequest)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int, *dtos.UpdateBuyerRequestDTO) *entities.Buyer); ok {
		r0 = rf(ctx, id, updateBuyerRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Buyer)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int, *dtos.UpdateBuyerRequestDTO) error); ok {
		r1 = rf(ctx, id, updateBuyerRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBuyerServiceMock creates a new instance of BuyerServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuyerServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *BuyerServiceMock {
	mock := &BuyerServiceMock{}
	mock.Mock.Test(t)

	return mock
}
