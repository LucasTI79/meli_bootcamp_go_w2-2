// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "github.com/extmatperez/meli_bootcamp_go_w2-2/internal/application/dtos"
	entities "github.com/extmatperez/meli_bootcamp_go_w2-2/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// WarehouseServiceMock is an autogenerated mock type for the WarehouseService type
type WarehouseServiceMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, dto
func (_m *WarehouseServiceMock) Create(c *context.Context, dto dtos.WarehouseRequestDTO) (*entities.Warehouse, error) {
	ret := _m.Called(c, dto)

	var r0 *entities.Warehouse
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, dtos.WarehouseRequestDTO) (*entities.Warehouse, error)); ok {
		return rf(c, dto)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, dtos.WarehouseRequestDTO) *entities.Warehouse); ok {
		r0 = rf(c, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Warehouse)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, dtos.WarehouseRequestDTO) error); ok {
		r1 = rf(c, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: c, id
func (_m *WarehouseServiceMock) Delete(c *context.Context, id int) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: c
func (_m *WarehouseServiceMock) GetAll(c *context.Context) (*[]entities.Warehouse, error) {
	ret := _m.Called(c)

	var r0 *[]entities.Warehouse
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context) (*[]entities.Warehouse, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*context.Context) *[]entities.Warehouse); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Warehouse)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: c, id
func (_m *WarehouseServiceMock) GetOne(c *context.Context, id int) (*entities.Warehouse, error) {
	ret := _m.Called(c, id)

	var r0 *entities.Warehouse
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int) (*entities.Warehouse, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) *entities.Warehouse); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Warehouse)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, id, dto
func (_m *WarehouseServiceMock) Update(c *context.Context, id int, dto dtos.WarehouseRequestDTO) (*entities.Warehouse, error) {
	ret := _m.Called(c, id, dto)

	var r0 *entities.Warehouse
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, int, dtos.WarehouseRequestDTO) (*entities.Warehouse, error)); ok {
		return rf(c, id, dto)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int, dtos.WarehouseRequestDTO) *entities.Warehouse); ok {
		r0 = rf(c, id, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Warehouse)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int, dtos.WarehouseRequestDTO) error); ok {
		r1 = rf(c, id, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWarehouseServiceMock creates a new instance of WarehouseServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWarehouseServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WarehouseServiceMock {
	mock := &WarehouseServiceMock{}
	mock.Mock.Test(t)

	return mock
}
